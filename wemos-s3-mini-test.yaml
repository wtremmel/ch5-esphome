# external_components:
#  - source: github://pr#4847
#    components: [ ld2420 ]
#    refresh: 0s

esphome:
  name: wemos-s3-mini-test
  friendly_name: wemos-s3-mini-test
  platformio_options: 
    board_build.extra_flags:
      - "-DARDUINO_USB_CDC_ON_BOOT=0"


  on_boot:
    - priority: 250
      then:
        - delay: 15s
        - lambda: |-
            id(ble_tracker).set_scan_continuous(true);
            id(ble_tracker).start_scan();
    - priority: 600
      then:
      - switch.turn_on: display_on
      - display.page.show: empty
      - light.turn_on:
          id: led
          brightness: 100%
          red: 100%
          green: 0
          blue: 0
      - wait_until:
          wifi.connected:
      - light.turn_on:
          id: led
          brightness: 100%
          red: 100%
          green: 100%
          blue: 0
      - wait_until:
          api.connected:
      - light.turn_on:
          id: led
          brightness: 100%
          red: 0%
          green: 100%
          blue: 0
      - delay: 1s
      - light.turn_off: led
      - display.page.show: running

      
esp32:
  board: adafruit_feather_esp32s3
  # board: lolin_s3_mini
  variant: esp32s3
  framework:
    type: arduino
    # type: esp-idf
    # version: recommended
    # platform_version: 6.2.0




# Enable logging
logger:
  level: ERROR

# Enable Home Assistant API
api:
  encryption:
    key: "diWWHcmRsJ/LUUIbmHmYBbdKCIjlCqYAYwPwG4VeOSA="

ota:
  password: "cc96ae441bb9818abd445b2748e2a14b"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password


esp32_ble_tracker:
  id: ble_tracker
  scan_parameters:
    continuous: false
    interval: 211ms
    window: 120ms
    active: true

bluetooth_proxy:
  active: true

i2c:
  - id: bus_a
    scan: True
    sda: GPIO35
    scl: GPIO36

uart:
  baud_rate: 256000
  parity: NONE
  stop_bits: 1
  tx_pin: GPIO16
  rx_pin: GPIO18

# network:
#  enable_ipv6: true

ld2410:
  timeout: 150s
  max_move_distance : 6m
  max_still_distance: 2.25m
  g0_move_threshold: 50
  g1_move_threshold: 50
  g2_move_threshold: 40
  g3_move_threshold: 40
  g4_move_threshold: 40
  g5_move_threshold: 40
  g6_move_threshold: 30
  g7_move_threshold: 30
  g8_move_threshold: 30
  g0_still_threshold: 0
  g1_still_threshold: 0
  g2_still_threshold: 40
  g3_still_threshold: 40
  g4_still_threshold: 40
  g5_still_threshold: 40
  g6_still_threshold: 15
  g7_still_threshold: 15
  g8_still_threshold: 15

button:
  - platform: safe_mode
    name: "Restart (Safe Mode)"
  - platform: restart
    name: "Restart"

switch:
  - platform: template
    id: display_on
    optimistic: true

light:
  - platform: neopixelbus
    pin: GPIO47
    variant: ws2811
    num_leds: 1
    name: LED
    type: RGB
    id: led
#  - platform: fastled_clockless
#    chipset: WS2811
#    pin: GPIO47
#    num_leds: 1
#    rgb_order: RGB
#    name: LED
#    id: led

# debug:

time:
  - platform: homeassistant
    id: homeassistant_time
    on_time:
      - seconds: 0
        minutes: 0
        hours: 22
        then:
          - switch.turn_off: display_on
      - seconds: 0
        minutes: 0
        hours: 7
        then:
          - switch.turn_on: display_on
          
font:
  - file: "fonts/Roboto/DroidSans-Bold.ttf"
    id: roboto
    size: 12
  - file: "fonts/Roboto/Roboto-Black.ttf"
    id: font2
    size: 12
    glyphs: ["<",">","-","D"]

display:
  - platform: ssd1306_i2c
    model: "SH1106 128x64"
    address: 0x3C
    rotation: 180
    pages:
      - id: empty
        lambda: |-
          it.fill(COLOR_OFF);
      - id: running
        lambda: |-
          if (id(display_on).state) {
            int fensterOffen = 0;
            int stretchFactor=18;
            if (id(bad1_fenster).state) {
              it.printf(0,stretchFactor*fensterOffen,id(roboto),"Bad1");
              fensterOffen++;
            }
            if (id(bad2_fenster).state) {
              it.printf(0,stretchFactor*fensterOffen,id(roboto),"Bad2");
              fensterOffen++;
            }
            if (id(kueche_fenster).state) {
              it.printf(0,stretchFactor*fensterOffen,id(roboto),"Küche");
              fensterOffen++;
            }
            if (id(gaestezimmer_fenster).state) {
              it.printf(0,stretchFactor*fensterOffen,id(roboto),"Gaestezimmer");
              fensterOffen++;
            }
            if (id(schlafzimmer_fenster).state) {
              it.printf(0,stretchFactor*fensterOffen,id(roboto),"Schlafzimmer");
              fensterOffen++;
            }
            if (id(wohnzimmer_fenster).state) {
              it.printf(0,stretchFactor*fensterOffen,id(roboto),"Wohnzimmer");
              fensterOffen++;
            }
            if (id(arbeitszimmer_fenster).state) {
              it.printf(0,stretchFactor*fensterOffen,id(roboto),"Arbeitszimmer");
              fensterOffen++;
            }
            if (id(haustuer).state) {
              it.printf(0,stretchFactor*fensterOffen,id(roboto),"Haustuer");
              fensterOffen++;
            }
            if (fensterOffen == 0)
              fensterOffen = 1;
            {
              String lowest = "";
              float lvalue = 100;

              if (id(garten_temperatur).state < lvalue && id(garten_temperatur).state > -30) {
                lvalue = id(garten_temperatur).state;
                lowest = "Garten";
              }
              if (id(vorgarten_temperatur).state < lvalue && id(vorgarten_temperatur).state > -30) {
                lvalue = id(vorgarten_temperatur).state;
                lowest = "Vorgarten";
              }
              if (id(loggia_temperatur).state < lvalue && id(loggia_temperatur).state > -30) {
                lvalue = id(loggia_temperatur).state;
                lowest = "Loggia";
              }
              it.printf(0, stretchFactor*fensterOffen, id(roboto), "%s: %.1fC",lowest.c_str(),lvalue);
            }
            // if (id(garten_temperatur).state < id(loggia_temperatur).state && id(garten_temperatur).state > -30)
            //  it.printf(0, stretchFactor*fensterOffen, id(roboto), "Garten: %.1fC",id(garten_temperatur).state);
            // else
            //  it.printf(0, stretchFactor*fensterOffen, id(roboto), "Loggia: %.1fC",id(loggia_temperatur).state);
              // it.printf(0,stretchFactor*(fensterOffen+1), id(roboto), "H: %d",id(haustuer).state);
            it.printf(110,0,id(font2),id(wostehtdasAuto).state.c_str());
            } else
              it.fill(COLOR_OFF);

text_sensor:
#  - platform: debug
#    device:
#      name: "Device Info"
#    reset_reason:
#      name: "Reset Reason"
  - platform: homeassistant
    internal: true
    id: wostehtdasAuto
    entity_id: input_text.carlocation

sensor:
#  - platform: debug
#    free:
#      name: "Heap Free"
#    block:
#      name: "Heap Max Block"
#    loop_time:
#      name: "Loop Time"
  - platform: homeassistant
    entity_id: sensor.garten_temperatur
    id: garten_temperatur
  - platform: homeassistant
    entity_id: sensor.vorgarten_temperatur
    id: vorgarten_temperatur  
  - platform: homeassistant
    entity_id: sensor.2og_loggia_temperatur
    id: loggia_temperatur
  - platform: bme680
    i2c_id: bus_a
    address: 0x77
    temperature:
      name: Temperature
      accuracy_decimals: 2
      filters:
        - offset: -5
        - sliding_window_moving_average:
            window_size: 10
            send_every: 6
    pressure:
      name: "Luftdruck"
      accuracy_decimals: 2
      filters:
        - sliding_window_moving_average:
            window_size: 10
            send_every: 6
    humidity:
      accuracy_decimals: 2
      name: "Luftfeuchtigkeit"
      filters:
        - sliding_window_moving_average:
            window_size: 10
            send_every: 6
    gas_resistance:
      name: "Gas"
      accuracy_decimals: 2
      filters:
        - sliding_window_moving_average:
            window_size: 10
            send_every: 6
    update_interval: 5s

  - platform: max44009
    name: "Light"

  - platform: ld2410
    moving_distance:
      name : Moving Distance
      id: moving_distance
    still_distance:
      name: Still Distance
      id: still_distance
    moving_energy:
      name: Move Energy
    still_energy:
      name: Still Energy
    detection_distance:
      name: Detection Distance

binary_sensor:
  - platform: ld2410
    has_target:
      name: Presence
    has_moving_target:
      id: presence
      name: Moving Target
      device_class: motion
      filters:
        - delayed_on: 1s
      on_press:
        then:
          - if:
              condition:
                binary_sensor.is_on: alarmierung
              then:
                - light.turn_on:
                    id: led
                    brightness: 100%
                    red: 100%
                    green: 0
                    blue: 0
      on_release:
        then:
          - light.turn_off: led 
    has_still_target:
      name: Still Target
  - platform: homeassistant
    entity_id: input_boolean.alarmierung
    id: alarmierung
    internal: true
  - platform: homeassistant
    entity_id: binary_sensor.fenster_bad1_state
    id: bad1_fenster
    name: "Bad1"
    internal: true
  - platform: homeassistant
    entity_id: binary_sensor.fenster_bad2_state
    id: bad2_fenster
    name: "Bad2"
    internal: true
  - platform: homeassistant
    entity_id: binary_sensor.fenster_gaestezimmer_35fd906b_ias_zone
    id: gaestezimmer_fenster
    name: "Gaestezimmer"
    internal: true
  - platform: homeassistant
    entity_id: binary_sensor.fenster_kueche_state
    id: kueche_fenster
    name: "Küche"
    internal: true
  - platform: homeassistant
    entity_id: binary_sensor.fenster_schlafzimmer_state
    id: schlafzimmer_fenster
    name: "Schlafzimmer"
    internal: true
  - platform: homeassistant
    entity_id: binary_sensor.fenster_wohnzimmer_state
    id: wohnzimmer_fenster
    name: "Wohnzimmer"
    internal: true
  - platform: homeassistant
    entity_id: binary_sensor.balkontuer_arbeitszimmer_state
    id: arbeitszimmer_fenster
    name: "Arbeitszimmer"
    internal: true
  - platform: homeassistant
    entity_id: binary_sensor.lumi_lumi_sensor_magnet_aq2_on_off
    id: haustuer
    name: "Haustür"
    internal: true
    on_state:
      then:
        - light.turn_off: led
  - platform: homeassistant
    entity_id: binary_sensor.lumi_lumi_sensor_magnet_aq2_0e3dcf03_on_off
    id: briefkasten
    name: "Briefkasten"
    internal: true
    on_press:
      then:
        - light.turn_on:
            id: led
            brightness: 80%
            red: 100%
            green: 0
            blue: 0
    on_release:
      then:
        - light.turn_on:
            id: led
            brightness: 80%
            red: 1
            green: 1
            blue: 0