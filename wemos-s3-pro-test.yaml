
esphome:
  name: wemos-s3-pro-test
  friendly_name: wemos-s3-pro-test

  on_boot:
    - priority: 600
      then:
      - light.turn_on:
          id: led
          brightness: 100%
          red: 100%
          green: 0
          blue: 0
      - wait_until:
          wifi.connected:
      - light.turn_on:
          id: led
          brightness: 100%
          red: 100%
          green: 100%
          blue: 0
      - wait_until:
          api.connected:
      - light.turn_on:
          id: led
          brightness: 100%
          red: 0%
          green: 100%
          blue: 0
      - delay: 1s
      - light.turn_off: led

esp32:
  board: lolin_s3
  framework:
    type: arduino

# Enable logging
logger:
  baud_rate: 0

# Enable Home Assistant API
api:
  encryption:
    key: "sQSDyyXz/KSstdzM9CFNJk2RgYE8v2+JyigPOMYu0zo="

ota:
  password: "106d5aa8bbe1f6547717126203d12b22"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails

i2c:
  - id: bus_a
    scan: True
    sda: GPIO9
    scl: GPIO10



font:
  - file: "fonts/Roboto/DroidSans-Bold.ttf"
    id: roboto
    size: 14
  - file: "fonts/Roboto/DroidSans-Bold.ttf"
    id: headline
    size: 30
  - file: "fonts/Roboto/DroidSans-Bold.ttf"
    id: bold20
    size: 20
  - file: "fonts/Roboto/Roboto-Thin.ttf"
    id: thin
    size: 15

time:
  - platform: homeassistant
    id: esptime

image:
  - file: mdi:window-open-variant
    id: icon_openWindow
    resize: 40x40
  - file: mdi:window-closed-variant
    id: icon_closedWindow
    resize: 40x40
  
  # Car location
  - file: mdi:car-side
    id: icon_car
    resize: 40x40
  - file: mdi:arrow-left-bold
    id: icon_arrowleft
    resize: 40x40
  - file: mdi:arrow-right-bold
    id: icon_arrowright
    resize: 40x40
  - file: mdi:map-marker-question-outline
    id: icon_location_unknown
    resize: 40x40
    
  # Temperature Icons
  - file: mdi:thermometer-high
    id: icon_thermometer_high
    resize: 80x80
  - file: mdi:thermometer-low
    id: icon_thermometer_low
    resize: 80x80
  - file: mdi:thermometer
    id: icon_thermometer_mid
    resize: 80x80
  - file: mdi:snowflake-thermometer
    id: icon_thermometer_snow
    resize: 80x80
  - file: mdi:sun-thermometer
    id: icon_thermometer_sun
    resize: 80x80
  - file: mdi:temperature-celsius
    id: icon_celsius
    resize: 30x30

  # Sunset and Sunrise
  - file: mdi:weather-sunset-up
    id: icon_sunrise
    resize: 40x40
  - file: mdi:weather-sunset-down
    id: icon_sunset
    resize: 40x40
  
  # Current weather
  - file: mdi:weather-pouring
    id: icon_rain_heavy
    resize: 180x180
  - file: mdi:weather-rainy
    id: icon_rain_light
    resize: 180x180
  - file: mdi:weather-lightning-rainy
    id: icon_rain_lightning
    resize: 180x180
  - file: mdi:weather-lightning
    id: icon_lightning
    resize: 200x200
  - file: mdi:weather-sunny
    id: icon_sonnenschein
    resize: 200x200
  - file: mdi:weather-cloudy
    id: icon_cloudy
    resize: 200x200
  - file: mdi:weather-partly-cloudy
    id: icon_partly_cloudy
    resize: 200x200
  - file: mdi:weather-night
    id: icon_night
    resize: 200x200

  # Letterbox
  - file: mdi:email-outline
    id: icon_briefkasten
    resize: 80x80
  - file: mdi:email-alert-outline
    id: icon_briefkasten_offen
    resize: 80x80

  

qr_code:
  - id: garf
    value: https://outpost.garf.de

spi:
  clk_pin: GPIO12
  # miso_pin: GPIO
  mosi_pin: GPIO11

display:
  - platform: waveshare_epaper
    id: epaper
    cs_pin: GPIO17
    dc_pin: GPIO16
    reset_pin: GPIO15
    busy_pin: GPIO18
    reset_duration: 2ms
    model: 7.50inv2
    update_interval: 60s
    rotation: 0
    lambda: |-
      int x,y,frame,width,height;
      
      it.strftime(it.get_width(),0,id(headline),TextAlign::TOP_RIGHT,"%H:%M:%S",id(esptime).now());
      it.horizontal_line(0,35,it.get_width());
      
      //------------------------------------------------------------------
      // Widget where is my car?
      // x,y,frame
      // size 82x40
      x = 0;
      y = it.get_height()-42;
      it.start_clipping(x,y,x+82,y+40);
      frame = 1;
      if (id(wostehtdasAuto).state.c_str()[0] == '<') {
        it.image(x,y,id(icon_arrowleft));
        it.image(x+40,y,id(icon_car));
      } else if (id(wostehtdasAuto).state.c_str()[0] == '>') {
        it.image(x,y,id(icon_car));
        it.image(x+40,y,id(icon_arrowright));
      } else {
        it.image(x,y,id(icon_car));
        it.image(x+40,y,id(icon_location_unknown));
      }
      if (frame) {
        it.rectangle(x,y,82,40);
      }
      it.end_clipping();
      //------------------------------------------------------------------

      //------------------------------------------------------------------
      // Widget: QR code of guest network
      //------------------------------------------------------------------
      //------------------------------------------------------------------
      // Widget: Loggia Temperature
      // x,y,frame,thisid,headline
      // size
      //------------------------------------------------------------------
      x = 0;
      y = 35;
      width=180;
      height=112;
      frame = 1;
      auto thisid = id(loggia_temperatur);
      
      if (frame) {
        it.rectangle(x,y,width,height);
      }
      it.print(x+4,y,id(headline),"Loggia");
      auto thisicon = id(icon_thermometer_sun);
      if (thisid->state <= 0)
        thisicon = id(icon_thermometer_snow);
      else if (thisid->state <= 10)
        thisicon = id(icon_thermometer_low);
      else if (thisid->state <= 25)
        thisicon = id(icon_thermometer_mid);
      else if (thisid->state <= 30)
        thisicon = id(icon_thermometer_high);
      it.image(x,y+35,thisicon);
      it.printf(x+80,y+40,id(headline),"%.1f",thisid->state);
      it.image(x+90+50,y+40,id(icon_celsius));
      
      //------------------------------------------------------------------
      // Widget: Garten Temperature
      // x,y,frame,thisid,headline
      // size
      //------------------------------------------------------------------
      x = x+width-1;
      frame = 1;
      thisid = id(garten_temperatur);
      
      if (frame) {
        it.rectangle(x,y,width,height);
      }
      it.print(x+4,y,id(headline),"Garten");
      thisicon = id(icon_thermometer_sun);
      if (thisid->state <= 0)
        thisicon = id(icon_thermometer_snow);
      else if (thisid->state <= 10)
        thisicon = id(icon_thermometer_low);
      else if (thisid->state <= 25)
        thisicon = id(icon_thermometer_mid);
      else if (thisid->state <= 30)
        thisicon = id(icon_thermometer_high);
      it.image(x,y+35,thisicon);
      it.printf(x+80,y+40,id(headline),"%.1f",thisid->state);
      it.image(x+90+50,y+40,id(icon_celsius));
        
      //------------------------------------------------------------------
      // Widget: Vorgarten Temperature
      // x,y,frame,thisid,headline
      // size
      //------------------------------------------------------------------
      x = x+width-1;
      frame = 1;
      thisid = id(vorgarten_temperatur);
      
      if (frame) {
        it.rectangle(x,y,width,height);
      }
      it.print(x+4,y,id(headline),"Vorgarten");
      thisicon = id(icon_thermometer_sun);
      if (thisid->state <= 0)
        thisicon = id(icon_thermometer_snow);
      else if (thisid->state <= 10)
        thisicon = id(icon_thermometer_low);
      else if (thisid->state <= 25)
        thisicon = id(icon_thermometer_mid);
      else if (thisid->state <= 30)
        thisicon = id(icon_thermometer_high);
      it.image(x,y+35,thisicon);
      it.printf(x+80,y+40,id(headline),"%.1f",thisid->state);
      it.image(x+90+50,y+40,id(icon_celsius));  

      int end_of_first_row = y + height-1;

    
      //------------------------------------------------------------------
      // Widget: Current weather
      //------------------------------------------------------------------
      x = x+width-1;
      height = 200;
      width = 250;
      frame = 1;
      if (frame) {
        it.rectangle(x,y,width,height);
      }
      bool Gewitter = (!isnan(id(lightning_distance).state) && id(lightning_distance).state <= 10);
      // first check the rain sensor if it is raining
      if (id(rain_intensity).state > 0) {
        //   second check for lightining
        it.printf(x+2,y+162,id(headline),"Regen: %.1f mm/h",id(rain_intensity).state);
        if (Gewitter) {
          // Gewitter und regen
          it.image(x+30,y,id(icon_rain_lightning));
        } else {
          // Nur Regen, wie stark?
          if (id(rain_intensity).state > 8) {
            // regnet stark
            it.image(x+30,y,id(icon_rain_heavy));
          } else {
            // regnet schwach
            it.image(x+30,y,id(icon_rain_light));
          }
        }
      } else if (Gewitter) {
        // Nur Gewitter, kein Regen
        it.image(x+10,y,id(icon_lightning));
      } else if (id(sun_elevation).state >= 0) {
      // Isses Tag oder Nacht?
        // Tag
        if (id(loggia_helligkeit).state > 2000) {
          //   Heftiger Sonnenschein
          it.image(x+30,y,id(icon_sonnenschein));
        } else if (id(loggia_helligkeit).state > 1000) {
          //   Bewoelkt
          it.image(x+30,y,id(icon_partly_cloudy));
        } else {
          it.image(x+30,y,id(icon_cloudy));
        }
      } else {
      // Nacht
        it.image(x+30,y,id(icon_night));
      // Mondphasen anzeigen
      }
      //------------------------------------------------------------------
      // Widget: Sunset and Sunrise
      //------------------------------------------------------------------
      x = 0;
      y = end_of_first_row;
      height = 80;
      width = 140;
      frame = 1;
      if (frame) {
        it.rectangle(x,y,width,height);
      }
      it.image(x,y+2,id(icon_sunrise));
      it.image(x,y+42,id(icon_sunset));
      it.printf(x+44,y+10, id(bold20),"%s",id(next_sunrise).state.c_str());
      it.printf(x+44,y+50,id(bold20),"%s",id(next_sunset).state.c_str());



globals:
  - id: letterbox
    type: bool
    initial_value: "0"

sun:
  latitude: 50.21581309274059
  longitude: 8.642163276672365

button:
  - platform: safe_mode
    name: "Restart (Safe Mode)"
  - platform: restart
    name: "Restart"

light:
  - platform: neopixelbus
    pin: GPIO38
    variant: ws2811
    num_leds: 1
    name: LED
    type: RGB
    id: led

# interval:
#  - interval: 20s
#    then:
#      - component.update: epaper

sensor:
#  - platform: debug
#    free:
#      name: "Heap Free"
#    block:
#      name: "Heap Max Block"
#    loop_time:
#      name: "Loop Time"
  - platform: sun
    type: elevation
    id: sun_elevation
  - platform: wifi_signal
    name: "WiFi Signal Sensor"
    id: wifi_rssi
  - platform: homeassistant
    entity_id: sensor.garten_temperatur
    id: garten_temperatur
  - platform: homeassistant
    entity_id: sensor.vorgarten_temperatur
    id: vorgarten_temperatur  
  - platform: homeassistant
    entity_id: sensor.2og_loggia_temperatur
    id: loggia_temperatur
  - platform: homeassistant
    entity_id: sensor.rain_intensity
    id: rain_intensity
  - platform: homeassistant
    entity_id: sensor.blitzortung_lightning_distance
    id: lightning_distance
  - platform: homeassistant
    entity_id: sensor.2og_loggia_helligkeit
    id: loggia_helligkeit

text_sensor:
#  - platform: debug
#    device:
#      name: "Device Info"
#    reset_reason:
#      name: "Reset Reason"
  - platform: homeassistant
    internal: true
    id: wostehtdasAuto
    entity_id: input_text.carlocation
  - platform: sun
    type: sunrise
    id: next_sunrise
  - platform: sun
    type: sunset
    id: next_sunset
  - platform: homeassistant
    entity_id: sensor.moon_phase
    id: moon_phase

binary_sensor:
  - platform: homeassistant
    entity_id: binary_sensor.lumi_lumi_sensor_magnet_aq2_0e3dcf03_on_off
    id: briefkasten
    name: "Briefkasten"
    internal: true
    on_press:
      then:
        - light.turn_on:
            id: led
            brightness: 80%
            red: 100%
            green: 0
            blue: 0
        - globals.set:
            id: letterbox
            value: "1"
    on_release:
      then:
        - light.turn_on:
            id: led
            brightness: 80%
            red: 1
            green: 1
            blue: 0
        - globals.set:
            id: letterbox
            value: "1"