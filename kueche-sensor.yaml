
ota:
  password: "00301c9300cfd7a097069840742e5d29"


esp32:
  board: wemos_d1_mini32


# ---
substitutions:
  room: kueche
  uroom: "Kueche"
  rssi_present: id(harssi_present).state
  rssi_not_present: id(harssi_not_present).state
  
esphome:
  name: $room-sensor
  on_boot:
    priority: 600
    then:
      - light.turn_on:
          id: led
          brightness: 100%
          red: 100%
          green: 0
          blue: 0
      - wait_until:
          wifi.connected:
      - light.turn_on:
          id: led
          brightness: 100%
          red: 100%
          green: 100%
          blue: 0
      - wait_until:
          api.connected:
      - light.turn_on:
          id: led
          brightness: 100%
          red: 0%
          green: 100%
          blue: 0
      - delay: 1s
      - light.turn_off: led
      
# Enable logging
logger:
  level: ERROR
  
# Enable Home Assistant API
api:


button:
  - platform: safe_mode
    name: "$uroom Restart (Safe Mode)"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: true

i2c:
  - id: bus_a
    scan: true
    sda: GPIO21
    scl: GPIO22
    frequency: 400kHz

globals:
  - id: my_brightness
    type: float
    restore_value: no
    initial_value: '0.8'

script:
  - id: presence_timeout
    mode: restart
    then:
      - delay: 30s
      - lambda: |-
          id(room_presence_debounce).publish_state(0);
      - script.execute: presence_timeout
  - id: tuer_offen
    then:
      - logger.log:
          format: "hp:%d, tk:%d, home:%s, temp:%f, min: %f"
          args: ['id(heizperiode).state','id(tuer_kueche).state','id(someone_home).state.c_str()','id(${room}_temperature).state','id(temp_minimum).state']
      - if:
          condition:
            # if Door is open 
            #    AND Heizperiode
            #.   AND someone at home
            #.   AND temperature <= switch-on-temp
            and: 
              - binary_sensor.is_on: heizperiode
              - binary_sensor.is_on: tuer_kueche
              - or:
                - text_sensor.state:
                    id: someone_home
                    state: "HOME"
                - text_sensor.state:
                    id: someone_home
                    state: "home"
              - lambda: return (id(${room}_temperature).state < id(temp_minimum).state);
          then:
            - light.turn_on:
                id: tuerzu_led
                red: 1
                green: 1
                blue: 0
                brightness: !lambda |-
                  return id(my_brightness);
          else:
            - light.turn_off: tuerzu_led
time:
  - platform: homeassistant
    id: my_time
    on_time:
      - seconds: 0
        minutes: 0
        hours: 22
        then:
          - globals.set:
              id: my_brightness
              value: '0.01'
      - seconds: 0
        minutes: 0
        hours: 6
        then:
          - globals.set:
              id: my_brightness
              value: '0.8'
  
sensor:
  - platform: template
    id: apple_watch_rssi
    name: "Apple Watch $uroom RSSI"
    device_class: signal_strength
    unit_of_measurement: dBm
    accuracy_decimals: 0
    filters:
      - exponential_moving_average:
          alpha: 0.3
          send_every: 1
    on_value:
      then:
        - lambda: |-
            if (id(apple_watch_rssi).state > $rssi_present) {
              id(room_presence_debounce).publish_state(1);
            } else if (id(apple_watch_rssi).state < $rssi_not_present) {
              id(room_presence_debounce).publish_state(0);
            }
        - script.execute: presence_timeout  # Publish 0 if no rssi received
  - platform: template
    id: room_presence_debounce
    filters:
      - sliding_window_moving_average:
          window_size: 3
          send_every: 1
  - platform: homeassistant
    name: HA RSSI Present Value
    entity_id: input_number.rssi_present  
    id: harssi_present
  - platform: homeassistant
    name: HA RSSI Not Present Value
    entity_id: input_number.rssi_not_present
    id: harssi_not_present
  - platform: homeassistant
    entity_id: input_number.kueche_temperatur_maximum
    device_class: "temperature"
    id: temp_maximum
    internal: true
  - platform: homeassistant
    entity_id: input_number.kueche_temperatur_minimum
    device_class: "temperature"
    id: temp_minimum
    internal: true
  - platform: homeassistant
    entity_id: sensor.heizung_kueche_current
    id: heizung_strom
    internal: true
    on_value_range:
      - above: 0.5
        then:
          - light.turn_on:
              id: heizung_led
              red: 1
              green: 0
              blue: 0
              brightness: 80%
      - below: 0.1
        then:
          - light.turn_off: heizung_led
  - platform: wifi_signal
    name: "${uroom} WiFi Signal"
    update_interval: 60s
  - platform: tsl2561
    i2c_id: bus_a
    id: ${room}_light
    name: "${uroom} Light"
    address: 0x39
    update_interval: 60s
    accuracy_decimals: 2
  - platform: bme280
    i2c_id: bus_a
    temperature:
      name: "${uroom} Temperatur"
      id: ${room}_temperature
      accuracy_decimals: 2
      filters:
        - offset: -2
        - sliding_window_moving_average:
            window_size: 10
            send_every: 6
      on_value:
  #      if:
  #        condition:
  #          lambda: |-
  #            return (id(${room}_temperature).state <= id(temp_minimum).state);
          then:
            - script.execute: tuer_offen
        
    pressure:
      name: "${uroom} Luftdruck"
      id: "${room}_pressure"
      accuracy_decimals: 2
      filters:
        - sliding_window_moving_average:
            window_size: 10
            send_every: 6
    humidity:
      name: "${uroom} Luftfeuchtigkeit"
      id: "${room}_humidity"
      accuracy_decimals: 2
      filters:
        - sliding_window_moving_average:
            window_size: 10
            send_every: 6
      on_value_range:
        - above: 40
          then:
            - light.turn_on:
                id: humidity_led
                blue: 1
                red: 0
                green: 0
                brightness: !lambda |-
                  return (((id(${room}_humidity).state - 34) * 1.5) / 100.0) * id(my_brightness);
        - below: 40
          then:
            - light.turn_off: humidity_led
    address: 0x76
    update_interval: 5s

binary_sensor:
  - platform: template
    id: room_presence
    name: "$uroom presence"
    device_class: occupancy
    lambda: |-
      if (id(room_presence_debounce).state > 0.99) {
        return true;
      } else if (id(room_presence_debounce).state < 0.01) {
        return false;
      } else {
        // return id(room_presence).state;
        return {};
      }
  - platform: homeassistant
    entity_id: input_boolean.alarmierung
    id: alarmierung
    internal: true
  - platform: homeassistant
    entity_id: input_boolean.heizperiode
    internal: true
    id: heizperiode
  - platform: homeassistant
    entity_id: binary_sensor.tuer_kueche_state
    internal: true
    id: tuer_kueche
    on_state:
      then:
        - script.execute: tuer_offen
        - logger.log:
            format: "Kuechentuer State %d"
            args: [ 'id(tuer_kueche).state']
  - platform: gpio
    pin: GPIO19
    id: ${room}_motion
    name: "${uroom} Motion"
    device_class: motion
    filters:
      - delayed_off: 60s
    on_press:
      then:
        - if:
            condition:
              binary_sensor.is_on: alarmierung
            then:
              - light.turn_on:
                  id: alarm_led
                  brightness: 100%
                  red: 100%
                  green: 0
                  blue: 0
    on_release:
      then:
        - light.turn_off: alarm_led

light:
  - platform: neopixelbus
    id: ledstrip
    variant: WS2811
    type: GRB
    pin: GPIO1
    num_leds: 8
    name: "${uroom} LED"
  - platform: partition
    name: "${uroom} Status LED"
    id: led
    segments:
      id: ledstrip
      from: 0
      to: 0
  - platform: partition
    name: "${uroom} Feuchtigkeit LED"
    id: humidity_led
    segments:
      id: ledstrip
      from: 1
      to: 1
  - platform: partition
    name: "${uroom} Heizung läuft"
    id: heizung_led
    segments:
      id: ledstrip
      from: 2
      to: 2
  - platform: partition
    name: "${uroom} Tür zu"
    id: tuerzu_led
    segments:
      id: ledstrip
      from: 3
      to: 3
  - platform: partition
    name: "${uroom} Alarm"
    id: alarm_led
    segments:
      id: ledstrip
      from: 4
      to: 7

text_sensor:
  - platform: homeassistant
    entity_id: group.beide
    internal: true
    id: someone_home
    
esp32_ble_tracker:
  scan_parameters:
    interval: 320ms
    window: 120ms
    active: false
  on_ble_advertise:
    - then:
      - lambda: |-
          optional<int16_t> best_rssi = nullopt;
          for (auto data : x.get_manufacturer_datas()) {
            // Guard against non-Apple datagrams, or those that are too small.
            if (data.data.size() < 4 || 
              data.uuid.to_string() != "0x004C" || 
              data.data[0] != 0x10 || data.data[1] < 5) {
              continue;
            }
            const int16_t rssi = x.get_rssi();
            const uint8_t status_flags = data.data[2] >> 4;  // High nibble
            const uint8_t data_flags = data.data[3];
            if (data_flags == 0x98) {  // Match unlocked Apple Watches
              if (status_flags == 0 || status_flags == 2) {
                best_rssi = max(rssi, best_rssi.value_or(rssi));
                // ESP_LOGD("ble_adv", "Found Apple Watch (mac %s), name %s, rssi %i", x.address_str().c_str(),x.get_name().c_str(), rssi);
              } else {
                // ESP_LOGD("ble_adv", "Possible Apple Watch? (mac %s), name %s, rssi %i, unrecognised status/action flags %#04x", x.address_str().c_str(),x.get_name().c_str(), rssi, data.data[2]);
              }
            }
          }
          if (best_rssi) {
            id(apple_watch_rssi).publish_state(*best_rssi);
          }

