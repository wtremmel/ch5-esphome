substitutions:
  room: wohnzimmer
  uroom: Wohnzimmer

external_components:
  - source: github://berfenger/esphome_components
    components: [ max44009 ]


esphome:
  name: wohnzimmer-co2
  on_boot:
    priority: 600
    then:
      - light.turn_on:
          id: led
          brightness: 100%
          red: 100%
          green: 0
          blue: 0
      - wait_until:
          wifi.connected:
      - light.turn_on:
          id: led
          brightness: 100%
          red: 100%
          green: 100%
          blue: 0
      - wait_until:
          api.connected:
      - light.turn_on:
          id: led
          brightness: 100%
          red: 0%
          green: 100%
          blue: 0


esp8266:
  board: d1_mini
#  framework:
#    version: 2.7.4

# Enable logging
logger:
  level: INFO

# Enable Home Assistant API
api:

ota:
  password: "7da8b814e8cc710ac3183e671b685479"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  reboot_timeout: 5min
  fast_connect: true
  
i2c:
  - id: bus_a
    scan: true
    sda: 4
    scl: 5
    frequency: 400kHz
    
font:
  - file: "fonts/Roboto/DroidSans-Bold.ttf"
    id: roboto
    size: 28
  - file: "fonts/Roboto/Roboto-Thin.ttf"
    id: smallfont
    size: 10

text_sensor:
  - platform: wifi_info
    ip_address:
      name: ESP IP Address
      id: my_ip
    ssid:
      name: ESP Connected SSID
    bssid:
      name: ESP Connected BSSID
    mac_address:
      name: ESP Mac Wifi Address
    scan_results:
      name: ESP Latest Scan Results
   
sensor:
  - platform: wifi_signal
    name: "$uroom WiFi Signal"
    id: wifi_rssi
  - platform: ccs811
    eco2:
      name: "${uroom} CO2"
      id: ${room}_co2
      on_value:
        then:
          - logger.log:
             format: "co2 value %.1f"
             args: [ 'id(${room}_co2).state' ]
      on_value_range:
        - above: 2000
          then:
            - logger.log:
                format: "above 2000 co2 value %.1f"
                args: [ 'id(${room}_co2).state' ]
            - light.turn_on:
                id: led
                brightness: 100%
                color_brightness: 20%
                red: 100%
                green: 0%
                blue: 0%
        - above: 1000
          below: 2000
          then:
            - logger.log:
                format: "above 1000 below 2000 co2 value %.1f"
                args: [ 'id(${room}_co2).state' ]
            - light.turn_on:
                id: led
                brightness: 100%
                color_brightness: 20%
                red: 100%
                green: 100%
                blue: 0%
        - below: 1000
          above: 399
          then:
            - logger.log:
                format: "below 1000 above 399 co2 value %.1f"
                args: [ 'id(${room}_co2).state' ]
            - light.turn_on:
                id: led
                brightness: 100%
                color_brightness: 20%
                red: 0%
                green: 100%
                blue: 0%
        - below: 399
          then:
            - logger.log:
                format: "below 399 co2 value %.1f"
                args: [ 'id(${room}_co2).state' ]
            - light.turn_off:
                id: led
    tvoc:
      name: "${uroom} TVOC"
    address: 0x5A
    update_interval: 60s 
  - platform: max44009
    id: "${room}_light"
    name: "${uroom} CO2 Helligkeit"
    

light:
  - platform: neopixelbus
    id: led
    variant: WS2811
    type: RGB
    pin: 14
    num_leds: 1
    name: "${uroom} CO2 LED"
    
display:
  - platform: ssd1306_i2c
    model: "SH1106 128x64"
    address: 0x3C
    rotation: 0
    lambda: |-
      if (isnan(id(${room}_co2).state)) 
        it.fill(COLOR_OFF);
      else {
        it.printf(0,0,id(smallfont),"IP: %s Signal: %.0f",id(my_ip).state.c_str(), id(wifi_rssi).state);
        it.printf(0,20, id(roboto), "%.0f ppm",id(${room}_co2).state);
      }
